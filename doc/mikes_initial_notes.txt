Original notes:
{
    Tantrum (TemperV2)

    TODO:
    0 - AIMING for the final shipable version of this to be a SINGLE header only. Bear this in mind with each feature we build.
    1 - Test auto registration and execution (with flags for skipping and declaring which suite they belong to).
    2 - Logging in release code to fail tests if conditions aren't met, as well as provide a basic AddExpectedError(const char*) and AssertErrorOccured(const char*))
    3 - Parametric testing support, it's very useful not only when doing low level engine stuff but also occasionally in gameplay testing and other higher level features.
    4 - Test condition macros (e.g. TEST_TRUE(condition, message), TEST_GREATER_THAN(conditionA, conditionB, message), TEST_ALMOST_EQUAL(conditionA, conditionB, tolerance, message))
    5 - An Extra run command to act as a basic search - running any test with a name containing a given set of characters
    
    TO AVOID
    0 - Test fixtures with V-tables
    1 - Running tests in parallel
    2 - Making this framework a C++ only system, must work in C99! (less a thing for Dan and more for Mike as an advisary)
}


TODO:
TESTS WILL NO LONGER RETURN WEATHER THEY PASS OR FAIL - THE GLOBAL CONTEXT FOR TANTRUM WILL KEEP AN ERROR COUNT FOR THE IMMEDIATE TEST AND FAIL IT IF THE TEST COMPLETES WITH AN ERROR COUNT GREATER THAN 0


Priority next steps:
- Mike - Big bad master test file to test everything about the Tantrum framework. All conditions, parametrics, logging, etc in C99.
- Mike - Big bad master test file to test everything about the Tantrum framework. All conditions, parametrics, logging, etc in C++ testing.
- Dan - OS support for Windows & Linux - maybe Mac if we can get a VM.
- Unclaimed - Logging erros in the user's codebase to fail tests.
- Unclaimed - Making Tantrum into a self testing framework for automation, so we don't have to test Tantrum with Temper or some other framework.

Non manditory next steps:
- Dan - HLML test porting.
