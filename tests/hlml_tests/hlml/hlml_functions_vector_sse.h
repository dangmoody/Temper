/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#include "hlml_constants_sse.h"
#ifndef __cplusplus
#include <stdbool.h>
#endif

// float2
inline static __m128 float2_dot_sse( 
	const __m128 lhs_x, const __m128 lhs_y,
	const __m128 rhs_x, const __m128 rhs_y )
{
	__m128 mul_x = _mm_mul_ps( lhs_x, rhs_x );
	__m128 mul_y = _mm_mul_ps( lhs_y, rhs_y );

	return _mm_add_ps( mul_x, mul_y );
}

inline static __m128 float2_lengthsq_sse( const __m128 lhs_x, const __m128 lhs_y )
{
	__m128 mul_x = _mm_mul_ps( lhs_x, lhs_x );
	__m128 mul_y = _mm_mul_ps( lhs_y, lhs_y );

	return _mm_add_ps( mul_x, mul_y );
}

inline static __m128 float2_length_sse( const __m128 lhs_x, const __m128 lhs_y )
{
	return _mm_sqrt_ps( float2_lengthsq_sse( lhs_x, lhs_y ) );
}

inline static void float2_normalize_sse( 
	const __m128  lhs_x, const __m128  lhs_y,
	      __m128* out_x,       __m128* out_y )
{
	__m128 invlen = float2_length_sse( lhs_x, lhs_y );
	invlen = _mm_rcp_ps( invlen );

	*out_x = _mm_mul_ps( lhs_x, invlen );
	*out_y = _mm_mul_ps( lhs_y, invlen );
}

inline static __m128 float2_distancesq_sse( 
	const __m128 lhs_x, const __m128 lhs_y,
	const __m128 rhs_x, const __m128 rhs_y )
{
	__m128 dx  = _mm_sub_ps( lhs_x, rhs_x );
	__m128 dy  = _mm_sub_ps( lhs_y, rhs_y );

	       dx  = _mm_mul_ps( dx, dx );
	       dy  = _mm_mul_ps( dy, dy );

	return _mm_add_ps( dx,  dy );
}

inline static __m128 float2_distance_sse( 
	const __m128 lhs_x, const __m128 lhs_y,
	const __m128 rhs_x, const __m128 rhs_y )
{
	return _mm_sqrt_ps( float2_distancesq_sse( lhs_x, lhs_y, 
	                                           rhs_x, rhs_y ) );
}


// float3
inline static __m128 float3_dot_sse( 
	const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z,
	const __m128 rhs_x, const __m128 rhs_y, const __m128 rhs_z )
{
	__m128 mul_x = _mm_mul_ps( lhs_x, rhs_x );
	__m128 mul_y = _mm_mul_ps( lhs_y, rhs_y );
	__m128 mul_z = _mm_mul_ps( lhs_z, rhs_z );

	__m128 add = _mm_add_ps( mul_x, mul_y );
	       add = _mm_add_ps( add,   mul_z );
	return add;
}

inline static void float3_cross_sse( 
	const __m128  lhs_x, const __m128  lhs_y, const __m128  lhs_z,
	const __m128  rhs_x, const __m128  rhs_y, const __m128  rhs_z,
	      __m128* out_x,       __m128* out_y,       __m128* out_z )
{
	__m128 mul_xa = _mm_mul_ps( lhs_y, rhs_z );
	__m128 mul_xb = _mm_mul_ps( lhs_z, rhs_y );
	*out_x = _mm_sub_ps( mul_xa, mul_xb );

	__m128 mul_ya = _mm_mul_ps( lhs_z, rhs_x );
	__m128 mul_yb = _mm_mul_ps( lhs_x, rhs_z );
	*out_y = _mm_sub_ps( mul_ya, mul_yb );

	__m128 mul_za = _mm_mul_ps( lhs_x, rhs_y );
	__m128 mul_zb = _mm_mul_ps( lhs_y, rhs_x );
	*out_z = _mm_sub_ps( mul_za, mul_zb );
}

inline static __m128 float3_lengthsq_sse( const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z )
{
	__m128 mul_x = _mm_mul_ps( lhs_x, lhs_x );
	__m128 mul_y = _mm_mul_ps( lhs_y, lhs_y );
	__m128 mul_z = _mm_mul_ps( lhs_z, lhs_z );

	__m128 add = _mm_add_ps( mul_x, mul_y );
	       add = _mm_add_ps( add,   mul_z );
	return add;
}

inline static __m128 float3_length_sse( const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z )
{
	return _mm_sqrt_ps( float3_lengthsq_sse( lhs_x, lhs_y, lhs_z ) );
}

inline static void float3_normalize_sse( 
	const __m128  lhs_x, const __m128  lhs_y, const __m128  lhs_z,
	      __m128* out_x,       __m128* out_y,       __m128* out_z )
{
	__m128 invlen = float3_length_sse( lhs_x, lhs_y, lhs_z );
	invlen = _mm_rcp_ps( invlen );

	*out_x = _mm_mul_ps( lhs_x, invlen );
	*out_y = _mm_mul_ps( lhs_y, invlen );
	*out_z = _mm_mul_ps( lhs_z, invlen );
}

inline static __m128 float3_distancesq_sse( 
	const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z,
	const __m128 rhs_x, const __m128 rhs_y, const __m128 rhs_z )
{
	__m128 dx  = _mm_sub_ps( lhs_x, rhs_x );
	__m128 dy  = _mm_sub_ps( lhs_y, rhs_y );
	__m128 dz  = _mm_sub_ps( lhs_z, rhs_z );

	       dx  = _mm_mul_ps( dx, dx );
	       dy  = _mm_mul_ps( dy, dy );
	       dz  = _mm_mul_ps( dz, dz );

	__m128 add = _mm_add_ps( dx,  dy );
	       add = _mm_add_ps( add, dz );
	return add;
}

inline static __m128 float3_distance_sse( 
	const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z,
	const __m128 rhs_x, const __m128 rhs_y, const __m128 rhs_z )
{
	return _mm_sqrt_ps( float3_distancesq_sse( lhs_x, lhs_y, lhs_z, 
	                                           rhs_x, rhs_y, rhs_z ) );
}


// float4
inline static __m128 float4_dot_sse( 
	const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z, const __m128 lhs_w,
	const __m128 rhs_x, const __m128 rhs_y, const __m128 rhs_z, const __m128 rhs_w )
{
	__m128 mul_x = _mm_mul_ps( lhs_x, rhs_x );
	__m128 mul_y = _mm_mul_ps( lhs_y, rhs_y );
	__m128 mul_z = _mm_mul_ps( lhs_z, rhs_z );
	__m128 mul_w = _mm_mul_ps( lhs_w, rhs_w );

	__m128 add = _mm_add_ps( mul_x, mul_y );
	       add = _mm_add_ps( add,   mul_z );
	       add = _mm_add_ps( add,   mul_w );
	return add;
}

inline static __m128 float4_lengthsq_sse( const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z, const __m128 lhs_w )
{
	__m128 mul_x = _mm_mul_ps( lhs_x, lhs_x );
	__m128 mul_y = _mm_mul_ps( lhs_y, lhs_y );
	__m128 mul_z = _mm_mul_ps( lhs_z, lhs_z );
	__m128 mul_w = _mm_mul_ps( lhs_w, lhs_w );

	__m128 add = _mm_add_ps( mul_x, mul_y );
	       add = _mm_add_ps( add,   mul_z );
	       add = _mm_add_ps( add,   mul_w );
	return add;
}

inline static __m128 float4_length_sse( const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z, const __m128 lhs_w )
{
	return _mm_sqrt_ps( float4_lengthsq_sse( lhs_x, lhs_y, lhs_z, lhs_w ) );
}

inline static void float4_normalize_sse( 
	const __m128  lhs_x, const __m128  lhs_y, const __m128  lhs_z, const __m128  lhs_w,
	      __m128* out_x,       __m128* out_y,       __m128* out_z,       __m128* out_w )
{
	__m128 invlen = float4_length_sse( lhs_x, lhs_y, lhs_z, lhs_w );
	invlen = _mm_rcp_ps( invlen );

	*out_x = _mm_mul_ps( lhs_x, invlen );
	*out_y = _mm_mul_ps( lhs_y, invlen );
	*out_z = _mm_mul_ps( lhs_z, invlen );
	*out_w = _mm_mul_ps( lhs_w, invlen );
}

inline static __m128 float4_distancesq_sse( 
	const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z, const __m128 lhs_w,
	const __m128 rhs_x, const __m128 rhs_y, const __m128 rhs_z, const __m128 rhs_w )
{
	__m128 dx  = _mm_sub_ps( lhs_x, rhs_x );
	__m128 dy  = _mm_sub_ps( lhs_y, rhs_y );
	__m128 dz  = _mm_sub_ps( lhs_z, rhs_z );
	__m128 dw  = _mm_sub_ps( lhs_w, rhs_w );

	       dx  = _mm_mul_ps( dx, dx );
	       dy  = _mm_mul_ps( dy, dy );
	       dz  = _mm_mul_ps( dz, dz );
	       dw  = _mm_mul_ps( dw, dw );

	__m128 add = _mm_add_ps( dx,  dy );
	       add = _mm_add_ps( add, dz );
	       add = _mm_add_ps( add, dw );
	return add;
}

inline static __m128 float4_distance_sse( 
	const __m128 lhs_x, const __m128 lhs_y, const __m128 lhs_z, const __m128 lhs_w,
	const __m128 rhs_x, const __m128 rhs_y, const __m128 rhs_z, const __m128 rhs_w )
{
	return _mm_sqrt_ps( float4_distancesq_sse( lhs_x, lhs_y, lhs_z, lhs_w, 
	                                           rhs_x, rhs_y, rhs_z, rhs_w ) );
}


#ifdef __cplusplus
}
#endif
